# VELKYMI PISMENY jsou znaceny NETERMINALY
# Malymi pismeny jsou znaceny terminaly (mely by byt identicke s tokeny)
# Startovnim NETERMINALEM je START
# Znakem mrizka zacinaji komentare
# Tento soubor obsahuje definici gramatiky a doplnuji poznamky ohledne stycnych bodu
# pro kooperaci bottom-up a top-down syntakaticke analyzy a poznamky ohledne semantiky
# Do precedencni analyzy (bottom-up) se prepina az ve chvili kdy je naprosto jiste ze se jedna o vyraz
# v tu chvili jsou vsechny tokeny jiz prectene rekurizivnim sestupem (0 az 2) navraceny do bufferu lexeru
# a vyraz je pristupem bottom-up zpracovan od zacatku a cely
# nasledujici znaky byly pro citelnosti napsany primo narozdil od jejich token-formy
# . dot
# : colon
# ( bracket_left_simple
# ) bracket_rigth_simple
# { bracket_left_curly
# } bracket_right_curly
# , comma
# | pipe
# = assign
#



START -> PROLOG FN_DEF_NEXT END

END -> eof_token

PROLOG -> const ifj = import ( string ) ;
# string musi konkretne obsahovat "ifj24.zig"


FN_DEF_NEXT -> epsilon
FN_DEF_NEXT -> FN_DEF FUNC_DEF_NEXT

FN_DEF -> pub fn identifier ( PARAMS ) FN_DEF_REMAINING
FN_DEF_REMAINING -> TYPE { CODE_BLOCK_NEXT }
FN_DEF_REMAINING -> void { CODE_BLOCK_NEXT }
# identifier je ze semantickeho hlediska id funkce


PARAM -> identifier : TYPE

PARAMS -> epsilon
PARAMS -> PARAM PARAM_NEXT
PARAM_NEXT -> epsilon
PARAM_NEXT -> , PARAM_AFTER_COMMA
PARAM_AFTER_COMMA -> epsilon
PARAM_AFTER_COMMA -> PARAM PARAM_NEXT

TYPE -> type_int
TYPE -> type_float
TYPE -> type_string
TYPE -> type_int_null
TYPE -> type_float_null
TYPE -> type_string_null



CODE_BLOCK_NEXT -> epsilon
CODE_BLOCK_NEXT -> CODE_BLOCK CODE_BLOCK_NEXT

CODE_BLOCK -> VAR_DEF
CODE_BLOCK -> IF_STATEMENT
CODE_BLOCK -> WHILE_STATEMENT
CODE_BLOCK -> RETURN
CODE_BLOCK -> ASSIGN_EXPR_OR_FN_CALL
CODE_BLOCK -> ASSIGN_DISCARD_EXPR_OR_FN_CALL
CODE_BLOCK -> BUILT_IN_VOID_FN_CALL


VAR_DEF -> const identifier VAR_DEF_AFTER_ID
VAR_DEF -> var identifier VAR_DEF_AFTER_ID


VAR_DEF_AFTER_ID -> : TYPE = ASSIGN
VAR_DEF_AFTER_ID -> = ASSIGN


IF_STATEMENT -> if ( EXPRESSION ) IF_STATEMENT_REMAINING
IF_STATEMENT_REMAINING -> { CODE_BLOCK_NEXT } else { CODE_BLOCK_NEXT }
IF_STATEMENT_REMAINING -> | identifier | { CODE_BLOCK_NEXT } else { CODE_BLOCK_NEXT }
# ve chvili znalosti tokenu ( se prepina do bottom-up, navratovym stycnym bodem je )
# ktery bottom-up navrati lexeru
# ze semantickeho pohledu musi byt u konstrukce s |identifier| EXPRESSION NE-pravdivostni
# a bez |iden...| pravdivostni vyraz

WHILE_STATEMENT -> while ( EXPRESSION ) WHILE_STATEMENT_REMAINING
WHILE_STATEMENT_REMAINING -> { CODE_BLOCK_NEXT }
WHILE_STATEMENT_REMAINING -> | identifier | { CODE_BLOCK_NEXT }
# ve chvili znalosti tokenu ( se prepina do bottom-up, navratovym stycnym bodem je )
# ktery bottom-up navrati lexeru
# ze semantickeho pohledu musi byt u konstrukce s |identifier| EXPRESSION NE-pravdivostni
# a bez |iden...| pravdivostni vyraz

RETURN -> return RETURN_REMAINING
RETURN_REMAINING -> ;
RETURN_REMAINING -> ASSIGN


BUILT_IN_VOID_FN_CALL -> ifj . identifier ( ARGUMENTS ) ;
# semantika -> identifier musi spadat do mnoziny vestavenych funkci


ASSIGN_EXPR_OR_FN_CALL -> identifier ID_START
ASSIGN_DISCARD_EXPR_OR_FN_CALL -> discard_identifier = ASSIGN

ID_START -> = ASSIGN
ID_START -> FUNCTION_ARGUMENTS

ASSIGN -> null ;
ASSIGN -> EXPRESSION ;
# cokoli z EXPRESSION krome identifier,
# v tuto chvili do EXPRESSION spada i ";", pro osetreni jednoprvkovych vyrazu
# timto naznacujeme, ze pokud nasleduje cokoli jineho nez ifj nebo id, tak se jedna o vyraz
# precteny token je navracen do bufferu lexeru a je spustena precedencni analyza
# stycnym bodem pro navrat z bottom-up je ; ktery bottom-up navraci do bufferu lexeru pro zpracovani
# rekurzivnim sestupem
# kontrolu zdali je EXPRESSION pravdivostni ci nepravdivostni provadi semantika na zaklade pozice v kodu

ASSIGN -> identifier ID_ASSIGN

ASSIGN -> ifj . identifier ( ARGUMENTS ) ;
# semantika -> identifier musi spadat do mnoziny vestavenych funkci

ID_ASSIGN -> EXPRESSION ;
ID_ASSIGN -> ; # vrat zpet a EXPRESSION
ID_ASSIGN -> FUNCTION_ARGUMENTS
# cokoli z EXPRESSION krome "(",
# v tuto chvili do EXPRESSION spada i ";", pro osetreni jednoprvkovych vyrazu
# timto naznacujeme, ze pokud nasleduje cokoli jineho nez (, tak se jedna o vyraz
# prectene tokeny jsou navraceny do bufferu lexeru (id a 1 dalsi vyrazovy token) a je spustena precedencni analyza
# stycnym bodem pro navrat z bottom-up je ; ktery bottom-up navraci do bufferu lexeru pro zpracovani
# rekurzivnim sestupem
# kontrolu zdali je EXPRESSION pravdivostni ci nepravdivostni provadi semantika na zaklade pozice v kodu

ID_ASSIGN -> FUNCTION_ARGUMENTS

FUNCTION_ARGUMENTS -> ( ARGUMENTS ) ;


ARGUMENTS -> epsilon
ARGUMENTS -> ARGUMENT ARGUMENT_NEXT

ARGUMENT_NEXT -> epsilon
ARGUMENT_NEXT -> , ARGUMENT_AFTER_COMMA

ARGUMENT_AFTER_COMMA -> epsilon
ARGUMENT_AFTER_COMMA -> ARGUMENT ARGUMENT_NEXT

ARGUMENT -> identifier
ARGUMENT -> int
ARGUMENT -> float
ARGUMENT -> string
ARGUMENT -> null